{#
/**
 * @file
 * Default theme implementation to display a paragraph in Bootstrap Paragraphs.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# The template default set classes. #}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    background_field ? 'text-white',
    paragraph.field_custom_css_class.value,
    paragraph.field_full_width.value ? 'full-width',
  ]
%}
{%
  set column_classes = [
    paragraph.field_layout_large ? paragraph.field_layout_large.value,
    paragraph.field_layout_medium ? paragraph.field_layout_medium.value,
    paragraph.field_layout_small ? paragraph.field_layout_small.value
  ]
%}
{# Prints div with classes, and content without Width and Background. #}
<div{{ attributes.addClass(classes).setAttribute('id', 'paragraph-' ~ paragraph.id()) }}>
  <div class="bg-layer" style='background-color:{{content.field_background.0}};background-image:url({{ file_url(content.field_background_image['#items'].entity.uri.value) }});'>
    <div class="{{ paragraph.field_full_width.value ? 'container' }}">
      {% if paragraph.field_title.value %}
        <h3>{{ content.field_title }}</h3>
      {% endif %}
      <div class="row">
        {% for key,value in content.field_colums['#items'] %}
          {% set type = paragraph.field_colums[key].entity.field_card_type.value %}
          {% set card_image = {
              '#theme': 'image_style',
              '#style_name': 'article_teaser',
              '#uri': paragraph.field_colums[key].entity.field_image.entity.field_media_image.entity.fileuri,
              '#alt': paragraph.field_colums[key].entity.field_image.entity.field_media_image.0.alt,
              '#attributes': {
                'class': ['card-img', (type ?: 'card_image_top')]
              }
            }
          %}
          <div class="{{ column_classes|join(' ') }}">
            {{ include('talma:' ~ (type ?: 'card_image_top'),
              { 'card_title': paragraph.field_colums[key].entity.field_title.value,
              'card_body': paragraph.field_colums[key].entity.field_body.value,
              'card_image': card_image,
              })
            }}
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>
