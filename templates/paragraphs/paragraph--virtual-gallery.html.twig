{#
/**
 * @file
 * Default theme implementation to display a paragraph in Bootstrap Paragraphs.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# Build images from rendered content #}
{% set images = [] %}

{% for key, value in content.field_images['#items'] %}
  {# Build the image data by accessing paragraph fields directly #}

  {# Handle media fields #}
  {% if not paragraph.field_images[key].entity.field_image.isEmpty() %}
    {% set image_data = {
      'href': file_url(paragraph.field_images[key].entity.field_media_image.entity.uri.value),
      'title': paragraph.field_images[key].entity.field_media_image.alt,
      'thumbnail': paragraph.field_images[key].entity.field_media_image.entity.uri.value | image_style('thumbnail'),
    } %}
  {% endif %}

  {% set images = images|merge([image_data]) %}
{% endfor %}

{# The template default set classes. #}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  ]
%}

{# Prints div with classes, and content without Width and Background. #}
<div{{ attributes.addClass(classes).setAttribute('id', 'paragraph-' ~ paragraph.id()) }}>
  {{ include('talma:virtual_gallery',
    { 'id': 'gallery-' ~ paragraph.id(),
      'images': images,
      'link_text': paragraph.field_texto_link.value,
      'include_container': true
    })
  }}
</div>
{# End of the div #}
